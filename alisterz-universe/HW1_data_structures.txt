* CMPT 431 Distributed Systems - Richard Vaughan *

Homework 1: Speed up Universe by data structure improvements
============================================================

Your task is to speed up Universe by breaking up its single O(n^2)
distance comparison computation into multiple sequential O(m^2)
computations, where m < n. The goal is for the sum of the run time of
all the sequential computations to be less than that of the original.

The problem of measuring the distance between all n robots must be
partioned somehow. We discussed in class some ideas about partitioning
space into contiguous sections. Other approaches exist, such as
hierarchical space decomposition such as quad trees and pyramids
(explained in any computer graphics text). Various clustering methods
may also be used to maintain groups of neighboring robots without a
fixed spatial partition.

You are free to choose any method that interests you, however you have
limited time so choose something that you can implement quickly.

The main distance calculation for one robot to fill its array of
sensors is the Univers::Robot::UpdatePixels() method. 

Testing
-------

Universe understands these command line switches:

-? : Prints this helpful message.
-c <int> : sets the number of pixels in the robots' sensor
-d : Disables drawing the sensor field of view. Speeds things up a bit.
-f <float> : sets the sensor field of view angle in degrees
-p <int> : set the size of the robot population
-r <float> : sets the sensor field of view range
-s <float> : sets the side length of the (square) world
-u <int> : sets the number of updates to run before quitting
-w <int> : sets the initial size of the window, in pixels
-z <int> : sets the number of milliseconds to sleep between updates

Test your code by timing the real time it takes to do 10,000 update
steps, with a between-step sleep time of zero, for sensor view angles
of 270 degrees (the default) and 10 degrees, for increasing population
sizes [10, 100, 500, 1000, ... up to as large as you like] Like
this:

$ time ./universe -d -z 0 -f 10 -u 10000 -p 500
real	1m18.766s
user	1m15.687s
sys	0m0.992s

Run this a few times to obtain an average run time: this is your speed
metric. 

(We need to run for many simulation steps since the robot behaviour is
very different at t=0 and t=<thousands> when the sensor FOV is small,
and your run speed may be effected by the robot behaviour).

Reporting
---------

0) Sign up for a 10-minute demo meeting with the instructor or TA,
   using the sign-up sheet linked from the class webpage.

1) Write a 2 page report 

	a) explaining the approach and outlining the changes you made to
	the code. 

	b) explaining the new runtime complexity of your Universe.
 
   b) stating your performance claims, supported by timing data. Don't
   forget to report variance along with mean run times. Is your
   modified universe faster than the original? Is this true for all
   population sizes? Why, or why not?

2) Meet the instructor in CSIL to explain and demonstrate your code.

   Before your meeting time, you should set up your code runnning on a
   CSIL workstation or your laptop. Bring a paper copy of your draft
   report to discuss. You can revise your code and report after the
   demo meeting and before submission.

3) Submit the final version of your report electronically using the
   CMPT submission server.


Getting Help
------------

Follow the procedures on the class web page for getting help with this
assignment. Do not share code with your colleages, but discussing and
comparing stategies is encouraged.
